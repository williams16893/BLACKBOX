<!DOCTYPE html>
<html data-wf-page="648b4769eea9e32297b613e4" data-wf-site="647b75407a16be15a82901be">

<!-- Mirrored from www.useblackbox.io/chat by HTTrack Website Copier/3.x [XR&CO'2014], Sat, 23 Sep 2023 02:02:17 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head>
  <meta charset="utf-8">
  <title>Blackbox AI Code Chat</title>
  <meta content="Blackbox" property="og:title">
  <meta content="Blackbox" property="twitter:title">
  <meta content="width=device-width, initial-scale=1" name="viewport">
  <meta name="description" content="Try Out Our Code Chat for Free and Become a Master at Coding with BlackboxAI Code Assistant"/>
  <link href="css/new-chat-normalize.css" rel="stylesheet" type="text/css">
  <link href="css/new-chat-webflow.css" rel="stylesheet" type="text/css">
  <link href="css/new-chat-css.css" rel="stylesheet" type="text/css">
  <link href="https://fonts.googleapis.com/" rel="preconnect">
  <link href="https://fonts.gstatic.com/" rel="preconnect" crossorigin="anonymous">
  <script src="../ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script>
  <script type="text/javascript">WebFont.load({  google: {    families: ["Inconsolata:400,700","Inter:200,300,regular,500,600,700,800,900","Source Code Pro:regular,600,700,900"]  }});</script>
  <script type="text/javascript">!function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);</script>
  <link
    href="style/images/favicon.svg"
    rel="shortcut icon"
    type="image/x-icon"
  />
  <link href="new-chat-images/webclip.png" rel="apple-touch-icon">
  <link rel="stylesheet" href="../cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.min.css" integrity="sha512-xIf9AdJauwKIVtrVRZ0i4nHP61Ogx9fSRAkCLecmE2dL/U8ioWpDvFCAy4dcfecN72HHB9+7FfQj3aiO68aaaw==" crossorigin="anonymous" referrerpolicy="no-referrer">
  <script src="../cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.min.js" integrity="sha512-i9pd5Q6ntCp6LwSgAZDzsrsOlE8SN+H5E0T5oumSXWQz5l1Oc4Kb5ZrXASfyjjqtc6Mg6xWbu+ePbbmiEPJlDg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="../cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/mode/javascript/javascript.min.js"></script>
  <script src="../cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>
  <script src="../cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
  <script src="../cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/htmlmixed/htmlmixed.min.js"></script>
  <!--  This is for code syntax highlighting, and can be ignored.  -->
  <link rel="stylesheet" href="../cdnjs.cloudflare.com/ajax/libs/prism/1.22.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous">
  <style>
 /*General Scrollbar Styling */
 ::-webkit-scrollbar {
     width: 5px;
 }
::-webkit-scrollbar-track {
     background-color: rgba(0, 0, 0, .05);
     -webkit-border-radius: 5px;
     border-radius: 5px;
 }
 ::-webkit-scrollbar-thumb {
     -webkit-border-radius: 5px;
     border-radius: 5px;
     background: #515151;
 }
.CodeMirror {
	height: 100% !important;
}
:root {
  --color1: #a5d6ff;
  --color2: #ececec;
  --color3: #eee;
  --color4: #ff7b72;
  --color5: #ffb86c;
  --color6: #f99393;
  --color7: #ececec;
  --color-faded: #605C7B;
}
.cm-s-dracula .CodeMirror-gutters,
.cm-s-dracula.CodeMirror {
  background-color: transparent !important;
  color: var(--color7) !important;
  border: none;
}
.cm-s-dracula .CodeMirror-gutters {
  /* MY UI CARD COLOR */
  color: #131313;
}
.cm-s-dracula .CodeMirror-cursor {
  border-left: solid thin var(--color7);
}
.cm-s-dracula .CodeMirror-linenumber {
  color: var(--color-faded);
}
.cm-s-dracula .CodeMirror-selected {
  background: rgba(255, 255, 255, 0.1);
}
.cm-s-dracula .CodeMirror-line::selection,
.cm-s-dracula .CodeMirror-line > span::selection,
.cm-s-dracula .CodeMirror-line > span > span::selection {
  background: rgba(255, 255, 255, 0.1);
}
.cm-s-dracula .CodeMirror-line::-moz-selection,
.cm-s-dracula .CodeMirror-line > span::-moz-selection,
.cm-s-dracula .CodeMirror-line > span > span::-moz-selection {
  background: rgba(255, 255, 255, 0.1);
}
.cm-s-dracula span.cm-comment {
  color: var(--color-faded);
}
.cm-s-dracula span.cm-string,
.cm-s-dracula span.cm-string-2 {
  color: var(--color3);
}
.cm-s-dracula span.cm-number {
  color: var(--color6);
}
.cm-s-dracula span.cm-variable {
  color: var(--color1);
}
.cm-s-dracula span.cm-variable-2 {
  color: var(--color7);
}
.cm-s-dracula span.cm-def {
  color: var(--color1);
}
.cm-s-dracula span.cm-operator {
  color: var(--color2);
}
.cm-s-dracula span.cm-keyword {
  color: var(--color2);
}
.cm-s-dracula span.cm-atom {
  color: var(--color6);
}
.cm-s-dracula span.cm-meta {
  color: var(--color7);
}
.cm-s-dracula span.cm-tag {
  color: var(--color2);
}
.cm-s-dracula span.cm-attribute {
  color: var(--color1);
}
.cm-s-dracula span.cm-qualifier {
  color: var(--color1);
}
.cm-s-dracula span.cm-property {
  color: var(--color4);
}
.cm-s-dracula span.cm-builtin {
  color: var(--color1);
}
.cm-s-dracula span.cm-type,
.cm-s-dracula span.cm-variable-3 {
  color: var(--color5);
}
.cm-s-dracula .CodeMirror-activeline-background {
  background: rgba(255, 255, 255, 0.1);
}
.cm-s-dracula .CodeMirror-matchingbracket {
  text-decoration: underline;
  color: var(--color7) !important;
}
.tabcontainer::-webkit-scrollbar {
     height: 1px;
 }
.tabcontainer::-webkit-scrollbar-thumb {
     -webkit-border-radius: 5px;
     border-radius: 5px;
     background: rgba(0, 0, 0, 0.05);
 }

 .chat-message{
	display:block;
 }

 .bottom-holder{
	display: flex;
	align-items: center;
	justify-content: space-between;
 }

.quality-toaster{
	bottom: 10px;
	left: -400px;
	background-color: transparent;
	border-radius: 5px;
	border: 1px solid #363636;
	padding: 10px;
	transition:0.3s ease all;
	width: 240px;
	z-index: 99;
	padding:1px;
	margin-left: 16px;
}
.toaster-text{
	margin-bottom: 7px;
	text-align: center;
	color:#eee;
}
.toaster-icon {
	width: 30px;
	padding:5px;
	transition:0.3s ease all;
	border-radius:50%;
	cursor: pointer;
	box-sizing:border-box;
}
.toaster-icon:hover {
	background-color: #202938;
}
.icons-holder{
	display: flex;
	align-items: center;
	justify-content: center;
	gap:20px;
}
.success-icon{
	display:none
}
.icons-holder.active .toaster-icon{
	display:none
}
.icons-holder.active .success-icon{
	display:block
}

.button-holder-feedback{
	display: flex;
	align-items: center;
	gap: 10px;
	flex-shrink: 0;
	justify-content: left;
	padding-top:16px;
}

.button-holder{
	display: flex;
	align-items: center;
	gap: 10px;
	flex-shrink: 0;
	justify-content: center;
	padding-top:16px;
}

.beside-btn{
	padding: 8px;
	border-radius: 4px;
	cursor: pointer;
	transition: 0.3s ease all;
	margin: 0;
	background-color: transparent;
	border: 1px solid #444;
	display: none;
	text-align: center;
	color: #eee
}
.beside-btn.active{
	display:block;
}

.beside-btn:hover {
	opacity: 0.5;
}

.typing{
	display: flex;
	align-items: center;
	justify-content: space-between;
	font-style: italic;
	gap:5px;
}
.code-snippet-holder {
	position: relative;
	margin-top: 10px;
	padding-left: 10px;
	transition: all 0.3s ease 0s;
	border-radius: 5px;
	border-width: 1px;
	border-style: solid;
	border-color: rgb(96 96 96 / 0%);
	border-image: initial;
	padding-top:25px;
	background: #1a1c24;
	font-size: 14.5px;
}
.top-code-bar {
	position: absolute;
	right: 0px;
	z-index: 2;
	display: flex;
	align-items: center;
	opacity: 0;
	margin: 6px;
	gap: 5px;
	transition:0.3s ease all;
	top:0;
	cursor: pointer;
	height:20px;
}
.option-top-holder{
	display: flex;
	align-items: center;
	gap: 5px;
}
.option-text {
	display: none;
	margin-right: 5px;
	font-size: 10px!important;
	color: #a7b5c4;
	line-height: 11px;
}
.option-text.active {
	display: block;
}
.option-img {
	width: 15px;
	cursor: pointer;
}
.code-snippet-holder:hover .top-code-bar {
	opacity: 1;
}
.typing-loading{
	margin-top:7px;
	width:20px;	
}

.CodeMirror {
	height: auto;
	background-color: transparent !important;
}
.CodeMirror-gutters {
	background-color: transparent !important;
	border-right: 0 !important;
}
.CodeMirror-linenumbers {
	padding-right: 20px;
}

.chatMessage .CodeMirror-sizer{
	margin-left: 0px!important;
}
.CodeMirror-hscrollbar{
	height: 0px;
}
.chatMessage .CodeMirror-linenumber.CodeMirror-gutter-elt{
	display: flex;
	justify-content: flex-start;
	padding: 0;
}

.starter-text{
	cursor: pointer;
}

.suggestion-container {
  display: flex;
}
.suggestions-wrapper {
  display: flex;
  gap: 10px;
  margin: 0 auto;
  margin-right: 0;
}

.suggestion-text{
	cursor: pointer;
}

.copy-text{
	display:none;
}
.copy-text.active{
	display:block;
}
.top-code-bar img{
	width:15px;
}

.chat-string{
	white-space: pre-line;
}

a{
	color:#eee;
}

.icon-24{
	cursor: pointer;
}
.send-message{
	resize: none;
	height: 42px;
	max-height:300px;
	border-radius: 20px;
	box-shadow: 32px -24px 50px rgba(0, 0, 0, .5), 0 0 100px rgba(87, 128, 226, .7), 0 2px 18px rgba(112, 153, 251, .5);
}
.text-block-10{
	white-space: break-spaces;
}

.start-text *{
	white-space: break-spaces;
}
.chatlog-container {
    height: 100%;
    grid-column-gap: 16px;
    grid-row-gap: 16px;
    text-align: center;
    flex-direction: column;
    justify-content: flex-start;
    margin-left: 0;
    margin-right: 0;
    padding: 20px;
    display: flex;
    position: relative;
    overflow: auto;
}
.div-block-115 {
    grid-column-gap: 16px;
    grid-row-gap: 16px;
    flex-direction: column;
    padding: 16px;
    display: flex;
}
.vscode-chartbox {
	margin:0;
}
.chat-field-vscode{
	white-space: break-spaces;
}
.chat-string{
	white-space: break-spaces;
	line-height: 1.5;
	font-size: 16px;
}
.chat-field-vscode {
    z-index: 9;
    height: auto;
    grid-column-gap: 16px;
    grid-row-gap: 16px;
    background-color: #191c24;
    flex-direction: column;
    align-self: stretch;
    padding: 16px 16px 20px;
    display: flex;
    position: relative;
}
@media screen and (max-width: 991px){
	.chat-field-vscode {
		position: fixed;
		top: auto;
		bottom: 0%;
		left: 0%;
		right: 0%;
	}
}
@media screen and (max-width: 767px){
	.chat-field-vscode {
		z-index: 19;
	}
	.send-message{
		font-size: 16px;
	}
}
@media screen and (max-width: 479px){
	.chat-field-vscode {
		margin-left: 0;
		padding-bottom: 16px;
		position: fixed;
		top: auto;
		bottom: 0%;
		left: 0%;
		right: 0%;
	}
}
.chatlog-container {
    height: 100vh;
    grid-column-gap: 12px;
    grid-row-gap: 12px;
    text-align: center;
    flex-direction: column;
    flex: 1;
    justify-content: flex-start;
    margin-left: 0;
    margin-right: 0;
    padding: 16px;
    display: flex;
    position: relative;
    overflow: auto;
}
@media screen and (max-width: 991px){
	.chatlog-container {
		width: 100%;
		align-self: stretch;
		margin-bottom: 50px;
	}
}
@media screen and (max-width: 767px){
	.chatlog-container {
		margin-bottom: 128px;
		padding: 16px;
	}
}
@media screen and (max-width: 479px){
	.chatlog-container {
		height: auto;
		flex: none;
		margin-bottom: 0;
		padding-bottom: 0;
	}
}
.div-block-69-copy {
    width: 100%;
    height: 100%;
    flex-direction: column;
    display: flex;
    position: relative;
}
@media screen and (max-width: 479px){
	.div-block-69-copy {
		height: auto;
	}
}
.tab-pane-vscode {
    height: 100%;
    background-color: #191c24;
    padding-top: 0;
	position: relative;
    overflow: auto;
}
.text-field-copy{
	padding:8px 20px;
}
@media screen and (max-width: 479px){
	.tab-pane-vscode {
		height: auto;
		padding-bottom: 150px;
	}
}
.form-block.w-form{
	display: flex;
    width: 100%;
    flex-direction: column;
}

.modal-background-blur {
  position: absolute;
  width: 100%;
  height: 100%;
  margin: 0 auto;
  z-index: 99999;
  background-color: rgba(0, 0, 0, .7);
  display: flex;
}
.modal-container-signup {
  width: 300px;
  height: 150px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 auto;
  z-index: 9999;
  background-color: #1a1c24;
  position: relative;
  top: 40%;
  gap: 18px;
  border-radius: 10px;
}
.modal-generate-code-blur {
  position: absolute;
  width: 100%;
  height: 100%;
  margin: 0 auto;
  z-index: 99999;
  background-color: rgba(0, 0, 0, .7);
  display: flex;
}
.modal-container-generate-code {
  width: 500px;
  height: 200px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 auto;
  z-index: 9999;
  background-color: #1a1c24;
  position: relative;
  top: 40%;
  gap: 18px;
}
.upgrade-yellow{
	background-image: linear-gradient(191deg, #f1dc39 0%, #c96e05 87%);
}

</style>
<script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body class="body-vscode">
  
    <div
      id="g_id_onload"
      data-client_id="470209372142-460tuja407feap6jsta5men0b2fn639i.apps.googleusercontent.com"
      data-context="signin"
      data-ux_mode="popup"
      data-login_uri="https://useblackbox.io/googletap"
      data-auto_select="true"
      data-itp_support="true"></div>

    <div style="display: none"
      class="g_id_signin"
      data-type="standard"
      data-shape="rectangular"
      data-theme="filled_blue"
      data-text="signin_with"
      data-size="large"
      data-logo_alignment="left"></div>
  
  <div class="page-styles w-embed">
    <style>
.copy-code:active .copy-code_text.is-1 {display: none;}
.copy-code:active .copy-code_text.is-2 {display: block;}
</style>
  </div>
  <div class="section-4 wf-section">
    <div class="navbar-vertical-vscode">
      <div class="container-6">
        <div class="navbar-wrapper-3">
          <div class="div-block-60">
            <a href="index.html" class="vscode-navbar-logo w-nav-brand"><img src="new-chat-images/logo.png" loading="lazy" alt="Logo Blackbox" class="vscode-logo-navbar"></a>
          </div>
          <div class="div-block-61">
			<div class="div-block-65">
				<div class="div-block-64">
				  <div style="cursor: pointer;" class="vscode-button tertiary w-button reset-chat">New Chat</div>
				  <div class="text-block-7 small" style="margin-top: 12px;">Install the VSCode Extension Here</div>
				  <div style="cursor: pointer;" onclick="window.open('https://marketplace.visualstudio.com/items?itemName=Blackboxapp.blackbox')" class="vscode-button white w-button">Get VSCode Extension</div>
				  <div class="wrap">
					  
				  </div>
				</div>
			  </div>
            <div class="div-block-62">
              <div class="div-block-63"><img src="new-chat-images/chat-code.svg" loading="lazy" alt="" class="image-19">
                <div class="div-block-64" onclick="displayVideo()" style="cursor: pointer;">
                  <div class="text-block-7 bold">Code Chat</div>
                  <div class="text-block-7 small">Turn your question or instruction into code.</div>
                </div>
              </div>
              <div class="div-block-63"><img src="new-chat-images/terminal.svg" loading="lazy" alt="" class="image-19">
                <div onclick="window.open(`${window.location.origin}/autocomplete`)" class="div-block-64" style="cursor: pointer;">
                  <div class="text-block-7 bold">Code AutoComplete</div>
                  <div class="text-block-7 small">Available in 20+ programming languages.</div>
                </div>
              </div>
			  <div class="div-block-63"><img src="new-chat-images/terminal.svg" loading="lazy" alt="" class="image-19">
                <div onclick="window.open(`${window.location.origin}/autocommit`)" class="div-block-64" style="cursor: pointer;">
                  <div class="text-block-7 bold">Code AutoCommit</div>
                  <div class="text-block-7 small">BlackboxAI Commit Messages</div>
                </div>
              </div>
			  <div class="div-block-63"><img src="new-chat-images/terminal.svg" loading="lazy" alt="" class="image-19">
                <div onclick="window.open(`${window.location.origin}/version_history`)" class="div-block-64" style="cursor: pointer;">
                  <div class="text-block-7 bold">Code Version History</div>
                  <div class="text-block-7 small">BlackboxAI Version History</div>
                </div>
              </div>
			  <div class="div-block-63"><img src="new-chat-images/terminal.svg" loading="lazy" alt="" class="image-19">
                <div onclick="displayVideo('yAF70GfBc1Q')" class="div-block-64" style="cursor: pointer;">
                  <div class="text-block-7 bold">AI Generated README</div>
                  <div class="text-block-7 small">BlackboxAI REAMDE</div>
                </div>
              </div>
            </div>
			<div class="text-block-7 bold">Call Onboarding/Support</div>
			<div class="text-block-7 small">Schedule an Onboaridng/Support call with the Blackbox team. <a class="text-block-7" style="cursor: pointer;" onclick="window.open('https://calendly.com/blackboxapp/30min')">Schedule</a></div>
          </div>
          <div class="div-block-61-copy-copy">
			
				<a href="auth/google" class="vscode-button w-button upgrade-yellow">Get Started For Free</a>
            
          </div>
        </div>
      </div>
    </div>
    <div class="section-with-code-editor">
      <div data-current="Tab 1" data-easing="ease" data-duration-in="300" data-duration-out="100" class="tabs-50 w-tabs">
        <div class="tabcontainer w-tab-menu">
          <a data-w-tab="Tab 1" class="tab-vscode w-inline-block w-tab-link w--current">
            <div class="text-on-tab">Blackbox AI Chat</div>
			<!-- <img loading="lazy" src="/new-chat-images/Close.svg" alt="close" class="image-21"> -->
          </a>
        </div>
        <div class="tabs-content-2 w-tab-content">
          <div data-w-tab="Tab 1" class="tab-pane-vscode w-tab-pane w--tab-active">
            <div class="div-block-69-copy">
              <div class="chatlog-container chat-area">
                <div class="vscode-chartbox start-text">
                  <div class="div-block-68">
                    <div class="text-block-10">Hello, Blackbox AI Chat can answer coding questions. Below are recommendations to get the best out of BLACKBOX</div>
                  </div>
                  <div class="indent">
                    <div class="div-block-68"><img loading="lazy" src="new-chat-images/check_1.svg" alt="" class="icon-vscode">
                      <div class="text-block-10">Be as clear as possible</div>
                    </div>
					<div class="div-block-68"><img loading="lazy" src="new-chat-images/check_1.svg" alt="" class="icon-vscode">
						<div class="text-block-10">Define the coding language in your questions e.g. 'create a stripe subscription in nodejs'</div>
					  </div>
                    <div class="div-block-68"><img loading="lazy" src="new-chat-images/check_1.svg" alt="" class="icon-vscode">
                      <div class="text-block-10">Clarify as much as possible what you are looking for in your questions</div>
                    </div>
                  </div>
                  <div class="chat-button-containber">
					<a onclick="schedule_onboarding()" style="cursor: pointer;">Schedule Onboarding</a>
					
						<a onclick="window.location.href='auth/google'" class="vscode-button tertiary w-button">Upgrade to Pro</a>
					
                  </div>
                </div>
                <div class="vscode-chartbox right-no-outline no-border">
                  <div class="text-block-10">Here are some suggestion (choose one):</div>
                </div>
                <div class="vscode-chartbox right-no-outline starter-text">
                  <div class="text-block-10">write a function that reads data from a json file</div>
                </div>
                <div class="vscode-chartbox right-no-outline starter-text">
                  <div class="text-block-10">Implement a function to read a yaml file and convert it to json format.</div>
                </div>
                <div class="vscode-chartbox right-no-outline starter-text">
                  <div class="text-block-10">Write a function to connect to Elasticsearch client and index a bulk of data to the database.</div>
                </div>
              </div>
			  <div class="button-holder-feedback"></div>
			  	<div class="button-holder">
					<div class="beside-btn continue-btn">Continue</div>
					<div class="beside-btn pause-btn">Pause</div>
				</div>
              <div class="chat-field-vscode">
                <div class="chatfield-container">
                  <div class="form-block w-form">
                    <div id="email-form" class="form">
						<textarea type="text" class="text-field-copy w-input send-message" autofocus="true" placeholder="Ask any coding question"></textarea>
                      	<span style="cursor: pointer; background-color: #2e5dcd;" class="button-circle w-inline-block send-message-icon">
							<img loading="lazy" src="new-chat-images/send.svg" alt="send" class="icon-24">
						</span>
						<div class="button-ai-search-copy reset-chat">
							<div id="chat-input-new-chat">New Chat</div>
						  </div>
                    </div>
                  </div>
                </div>
                <div class="text-block-10-copy">Blackbox AI Chat is in beta and Blackbox is not liable for the content generated. Blackbox may produce inaccurate information about people, places, facts, code and more. By using Blackbox, you acknowledge that you agree to agree to Blackbox&#x27;s <a href="terms.html" target="_blank" class="link">Terms</a> and <a href="privacy.html" class="link">Privacy Policy</a>
                </div>
              </div>
            </div>
          </div>
          <div data-w-tab="Tab 2" class="tab-pane-vscode w-tab-pane"></div>
          <div data-w-tab="Tab 3" class="w-tab-pane"></div>
          <div data-w-tab="Tab 4" class="w-tab-pane"></div>
          <div data-w-tab="Tab 5" class="w-tab-pane"></div>
        </div>
      </div>
      <div class="divider"></div>
      <div style="display:none" data-current="Tab 1" data-easing="ease" data-duration-in="300" data-duration-out="100" class="tabs-50 w-tabs">
        <div class="tabcontainer w-tab-menu">
          <a data-w-tab="Tab 1" class="tab-vscode w-inline-block w-tab-link w--current"><img alt="" loading="lazy" src="new-chat-images/chat-code.svg" class="image-19">
            <div class="text-on-tab">CodeFile.js</div><img alt="" loading="lazy" src="new-chat-images/Ellipse.svg" class="image-20">
          </a>
        </div>
        <div class="tabs-content-2 w-tab-content">
          <div data-w-tab="Tab 1" class="tab-pane-vscode w-tab-pane w--tab-active">
            <div class="div-block-74">
              <div class="text-small-code">Users</div><img src="new-chat-images/chevron-right.svg" loading="lazy" alt="" class="image-23">
              <div class="text-small-code">anonim</div><img src="new-chat-images/chevron-right.svg" loading="lazy" alt="" class="image-23">
              <div class="text-small-code">Download</div><img src="new-chat-images/chevron-right.svg" loading="lazy" alt="" class="image-23"><img src="new-chat-images/chat-code.svg" loading="lazy" alt="" class="image-23">
              <div class="text-small-code">CodeFile.js</div>
            </div>
            <div class="div-block-69">
              <div class="code-container">
                <div code-mode="javascript" class="code_wrapper">
                  <div class="code-embed w-embed"><textarea class="code-editor" id="editor" style="opacity: 0.0">
//Write code in this file to try Blackbox Code AutoComplete
//Press Enter after each line you write
//You will get the next line suggestion
//Write your first line below
</textarea></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
	<div class="modal-background-blur" style="display: none;" onclick="$('.modal-background-blur')[0].style='display:none'">
		<div class="modal-container-signup">
		  <a href="#" class="link-block-4 w-inline-block" data-w-id="close-code-modal"></a>
		  <div class="div-block-76-copy">
		   <div id="codeForm" >
			<input type="text" name="referral-code" id="referral-code" class="text-field-copy w-input referral-code" />
		   </div>
		  </div>
		  <div class="text-block-12">Enter with the Referral Code</div>
		</div>
	  </div>
  </div>
  <script src="../d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c873d3.js?site=647b75407a16be15a82901be" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <script src="js/new-chat-js.js" type="text/javascript"></script>
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-L4CWV4PDGR"></script>
  <link rel="stylesheet" href="css/lity.css" />
  <script src="js/lity.js"></script>
  <script>
		let url = 'wss://www.useblackbox.io/'
		let global_message_id
		let full_stream_answer
		let stream_complete = false
		let isAnswerFinished = false;
		webSocket = new WebSocket(url);
		if (webSocket){
			webSocket.onmessage = (event) => {
				// console.log(event.data);
				if (event.data != 'connection established' && event.data != 'stream done'){
					showPart(event.data)
				}
				if (event.data == 'stream done'){
					let id = global_message_id
					if (id) removeTyping({id})
					if (full_stream_answer.length>0){
						showFeedbackToaster()
						addToAllAnswers(full_stream_answer)
						//check if allAnswers ends with <im_sep>
						let includes_im_sep = false
						if(allAnswers[allAnswers.length-1].blackbox){
							if (allAnswers[allAnswers.length-1].blackbox.slice(-10)== '<|im_sep|>'){
								allAnswers[allAnswers.length-1].blackbox = allAnswers[allAnswers.length-1].blackbox.slice(0,-10)
								includes_im_sep=true
							}
						}
						if (includes_im_sep == false){
							if (stream_complete == false) showContinue()
							else currType = "string"
						}else{
							if(continueObj.id){
								continueTyping({id: currId})
								getAnswer({...continueObj, clickedContinue: true})
								// showPause()
								hideBeside()
							}
							includes_im_sep=false
						}
					}
					$(".send-message").focus()
				}
			};
		}
		function displayVideo(videoId='TGE1iXQEzVA'){
			let url = `https://www.youtube.com/watch?v=${videoId}`
			lity(url)
		}
		$(".code_wrapper").each(function (index) {
			let textArea = $(this).find(".code-editor")[0];
			let codeMode = $(this).attr("code-mode");
			let copyButton = $(this).find(".copy-code");
			let editor = CodeMirror.fromTextArea(textArea, {
				mode: codeMode,
				theme: "dracula",
				lineNumbers: true,
				lineWrapping: true,
				readOnly: false
			});
			let temp = $("<textarea>");
			copyButton.on("click", function () {
				$("body").append(temp);
				temp.val(editor.getValue()).select();
				document.execCommand("copy");
				temp.remove();
			});
		});
</script>
<script>
	const user = {}

	var lastSearchedQuery = ""
	var lastAnswer = ""
	let allAnswers = []
	let version_update = 'v2'
	let is_demo = false
	let is_url_query = false

	$(document).on("keydown", ".send-message", function(e){
		const key = e.key
		if(key === "Enter" && !e.shiftKey){
			e.preventDefault()
			e.stopPropagation()
			const didSearch = localStorage.getItem("didSearch")
			if(didSearch && user._id == undefined ){
				window.location.href='auth/google'
			}else{
				if ($(this).val().includes('<script>') == false){
					let encodedStr = $(this).val().replace(/[\u00A0-\u9999<>\&]/g, function(i) {
						return '&#'+i.charCodeAt(0)+';';
					});
					let question = encodedStr
					if(question){
						setTimeout(()=>{
							$(this).height(1);
							var totalHeight = $(this).prop('scrollHeight') - parseInt($(this).css('padding-top')) - parseInt($(this).css('padding-bottom'));
							$(this).height(totalHeight);
						},10)
						sendMessage({message: question})
					}
					localStorage.setItem("didSearch", true)
				}
			}
		}
	})

	$(".send-message").css("height", "42px")
	$(".send-message").on('input', function(){
		$(this).height(1);
		var totalHeight = $(this).prop('scrollHeight') - parseInt($(this).css('padding-top')) - parseInt($(this).css('padding-bottom'));
		$(this).height(totalHeight);
	});

	var continueObj = {}
	var currId = ""
	$(document).on("click", ".continue-btn", function(){
		if(continueObj.id){
			continueTyping({id: currId})
			getAnswer({...continueObj, clickedContinue: true})
			// showPause()
			hideBeside()
		}
	})

	var takeInAnswers = true
	$(".reset-chat").on("click", function(){
		$(".chatMessage").remove()
		$(".suggestion-container").remove()
		$(".suggestion-title").remove()
		takeInAnswers = false
		setTimeout(() => {
			takeInAnswers = true
		}, 1000);
		continueObj = {}
		lastAnswer = ""
		allAnswers = []
		lastSearchedQuery = ""
		hideBeside()
		hideQualityToaster()
		currType = "string"
		$(".send-message").focus()
	})
	$(document).on("click", ".send-message-icon", function(e){
		const question = $(".send-message").val().trim()
		if(question){
			const didSearch = localStorage.getItem("didSearch")
			if(didSearch && user._id == undefined ){
				window.location.href='auth/google'
			}else{
				sendMessage({message: question})
			}
		}
	})

	$(document).on("click", ".starter-text", function(){
		let query = $(this).text()
		if(query){
			is_demo = true
			query = query.trimStart().trimEnd()
			sendMessage({message:query})
		}
	})

	function sendMessage(data) {
		const {message, time = null, sendToApi = true, code = false} = data
		if (message.includes('<script>') == false){
			if(!$(".send-message").attr("disabled")){
				if(sendToApi){
					$(".send-message").attr("disabled", true)
				}
				lastSearchedQuery = message
				allAnswers.push({"user":message})
				const textEl =$(".send-message")[0]
				var str = message
				if (!str) {
					str = textEl.value
				}

				if (str) {
					const $holder = $(`<div class="vscode-chartbox right-align chatMessage sent">
						<div class="div-block-68">
							<div class="text-block-10">${str}</div>
						</div>
						<div class="text-block-10 dark msg-time"></div>
					</div>`)

					var currTime
					if (!time) {
						currTime = new Date().getTime()
					} else currTime = time
					const setTime = new Date(currTime)
					
					var localTime = setTime.toLocaleString("en-US", {
						hour: "numeric",
						minute: "numeric",
						hour12: true
					})
					var dateDisplay = setTime.toDateString().split(' ').slice(1,3).join(' ')
					dateDisplay = dateDisplay+' '+ localTime

					$holder.find(".msg-time").html(`<div class='date-display'>${dateDisplay}</div>`)

					$(".chat-area").append($holder)


					if (sendToApi) {
						var answerArr = []
						let completed = false
						let iterations = 0
						let max_iterations = 0
						const id = new Date().getTime()
						currId = id
						const objToSend = {message: str, allMessages: allAnswers, max_iterations, iterations, completed, stream: "", id}
						addHolder({ id, from: "BLACKBOX AI" })
						getAnswer(objToSend)
						// showPause()
						hideBeside()
						// showRelated(id)
						$(".send-message").attr("disabled", false)
					}
					textEl.value = ""
				}
			}
		}
	}

	function showRelated(id){
        $.ajax({
            url:"/relatedResults",
            method:"POST",
            contentType:"application/json",
            data:JSON.stringify({query: lastSearchedQuery}),
            success:function(res){
                const relArr = res.response

                if(relArr.length){
                    const $el = $(`.chatMessage[data-id=${id}]`)
                    const $related = $("<div class='rel-holder'><div class='related-title'>related code search results: </div></div>")
                    relArr.forEach((el, idx)=>{
                        var domain = new URL(index.html).hostname.split(".")
                        if(domain[1].toLowerCase() == "com"){
                            domain = domain[0]
                        }
                        else{
                            domain = domain[1]
                        }
                        $related.append(`<div class="rel-item"><a target="_blank" href="${el.url}" class="rel">${el.title}</a><div class="rel-src">(source: ${domain})</div></div>`)
                    })

                    $el.append($related)
		
                    var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
                    // if(relArr.length > 1){
                    //     const $showMore = $("<div class='show-rel rel-btn'>Show more...</div>")
                    //     $showMore.on("click", function(){
                    //         if($(this).hasClass("show-rel")){
                    //             $(this).text("Show less...")
                    //             $el.find(".rel-item.hidden").toggleClass("hidden shown")

                    //             objDiv.scrollTop += $el[0].getBoundingClientRect().top
                    //         }
                    //         else{
                    //             $(this).text("Show more...")
                    //             $el.find(".rel-item.shown").toggleClass("hidden shown")
                    //         }

                    //         $(this).toggleClass("show-rel hide-rel")
                    //     })

                    //     $el.append($showMore)
                    // }

                    setTimeout(()=>{
                        objDiv.scrollTop = objDiv.scrollHeight
                    },10)
                }
            }
        })
    }

	function addHolder(data){
		const {id, from, time = null} = data
		const $holder = $(`<div class="vscode-chartbox chatMessage recieved" data-id='${id}'>
				<div class="div-block-68 title">
					<div class="text-block-10">${from}</div>
				</div>
				<div class="div-block-68 chat-message text-block-10"></div>
				<div class="text-block-10 dark bottom-holder"></div>
			</div>`)


		const dateDisplay = getTime(time)

		$holder.find(".bottom-holder").html(`<div class='typing'>blackbox typing<img src='/style/images/loader_three-dots-white.svg' class='typing-loading'></div><div class='date-display'>${dateDisplay}</div>`)

		$(".chat-area").append($holder)

		var languageId = "javascript"
		// showFeedback($(holder), languageId)
		var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
		objDiv.scrollTop = objDiv.scrollHeight
	}

	function getTime(time){
		var currTime
		if (!time) {
			currTime = new Date().getTime()
		} else currTime = time
		const setTime = new Date(currTime)
			
		var localTime = setTime.toLocaleString("en-US", {
			hour: "numeric",
			minute: "numeric",
			hour12: true
		})
		var dateDisplay = setTime.toDateString().split(' ').slice(1,3).join(' ')
		dateDisplay = dateDisplay+' '+ localTime
		return dateDisplay
	}

	
	function check_excess_chat_input(allMessages){
		let string_allMessages = JSON.stringify(allMessages)
		let is_excess_length = false
		let cutoff_input_length = 4000
		if (string_allMessages.length > cutoff_input_length) {
			is_excess_length=true
		}
		return is_excess_length
	}

	function cutMessageExcess(allMessages) {
    const rev1 = [...allMessages].reverse();
    // [{:}]
    const max = 1800;
    let currentCount = 0;
    const results = rev1.reduce((newMsg, current) => {
      if (currentCount >= max) {
        return newMsg;
      }
      const [key] = Object.keys(current);
      const currentSize = current[key].length + key.length;
      const remaining = max - (currentSize + currentCount);
      if (remaining > 0) {
        currentCount += currentSize;
        return [...newMsg, { [key]: current[key] }];
      }
      if (remaining < 0) {
        const rSize = currentSize + remaining;
        if (!rSize) {
          return newMsg;
        }
        currentCount += rSize;
        const text = current[key].slice(-(rSize - key.length));
        return [...newMsg, { [key]: text }];
      }
      const rSize = remaining - currentSize;
      currentCount += remaining;
      const text = current[key].slice(-(remaining - key.length));
      return [...newMsg, { [key]: text }];
    }, []);
    return results.reverse();
  }
	
	var lastStream = ""
	let percent_allocated = 50
	let is_stream = false
	let random_number = Math.round(Math.random()*100)
	if (random_number < percent_allocated) is_stream=true
	if (user.customerId) is_stream = true
	function getAnswer(data){
		isAnswerFinished = false;
		const {message, allMessages, max_iterations, iterations, completed, stream, id, clickedContinue = false} = data
		let userId = user._id ?? '';
		requestSuggestions({allMessages, textInput: message, userId });
		continueObj = data
		// let is_excess_length = check_excess_chat_input(allMessages)
		let is_excess_length = false;
		const allMessagesChecked = cutMessageExcess(allMessages);
		if (is_stream && is_excess_length == false && is_demo == false && is_url_query == false && webSocket.readyState == 1){
			full_stream_answer=''
			stream_complete = false
			currHolder = $(`.chatMessage[data-id='${id}']`)
			global_message_id = id
			let userId = ''
			if (user._id) userId = user._id
			if (clickedContinue == true){
				webSocket.send(JSON.stringify({command: 'continue', content: allMessagesChecked, userId: userId}));
			}else{
				webSocket.send(JSON.stringify({command: 'generate', content: allMessagesChecked, userId: userId}));
			}
		}else{
			is_demo = false // reset demo state
			is_url_query = false
			try {
				if (message.includes('<script>') == false){
					$.ajax({
						url:"/chat-request-v4",
						method:"POST",
						contentType:"application/json",
						data:JSON.stringify({
							textInput: message,
							allMessages,
							stream,
							clickedContinue
						}),
						success:function(res){
							const data = res
							const stream = data.response[0][0]
							if (data.version) version_update = data.version
							if(lastStream == stream){
								hideBeside()
								// removeTyping({id})
								continueObj = {}
								showFeedbackToaster()
								
								addToAllAnswers(stream)
								return
							}
							formatMessage({...data, id, clickedContinue})
							if(iterations < max_iterations){
								if(takeInAnswers){
									lastStream = stream
									getAnswer({message, allMessages, max_iterations, iterations: iterations + 1, completed, stream, id})
								}
								else{
									// removeTyping({id})
								}
							}
							else{
								addToAllAnswers(stream)
								// removeTyping({id})
								continueObj.iterations = 0
								if(stream.length > 950) showContinue()
								// showContinue()
								showFeedbackToaster()
								
							}
							$(".send-message").focus()
						},
					})
				}
			} catch (e) {
				// console.log(e)
			}
		}
	}

	
	
	window.addEventListener("message", (event) => {
		if (event.data.command === 'finished') {
			isAnswerFinished = true;
			$('.suggestion-title').show();
			$('.suggestion-container').show();
		}
	});
	let isSuggestionRunning = false;
	function requestSuggestions(data) {
		if (isSuggestionRunning) {
			return;
		}
		
		isSuggestionRunning = true;
		const { allMessages, textInput, userId } = data;
		$.ajax({
			url: '/chat-suggestions',
			method: 'POST',
			contentType: 'application/json',
			data: JSON.stringify({
				textInput: allAnswers.at(-1),
				allMessages: allAnswers,
				clickedContinue: false,
			}),
			success: function (res) {
				const data = res;
				if (data.length>0){
					let $title = $(`
					<div class="vscode-chartbox right-no-outline no-border suggestion-title">
						<div class="text-block-10">Here are some follow-up suggestion:</div>
					</div>
					`);
					
					let wrapper = `
					<div class="suggestions-wrapper">
						`
					
					const suggestionHtml = data.map(suggestion => `
					<div class="vscode-chartbox right-no-outline suggestion-text">
						<div class="text-block-10">${suggestion}</div>
					</div>
					`).join('\n');
					const $suggestions = $(`<div class="suggestion-container">${wrapper}${suggestionHtml}</div></div>`);
					if (!isAnswerFinished) {
						$title.hide();
						$suggestions.hide();
					}
					$('.chat-area').append($title);
					$('.chat-area').append($suggestions);
					$(document).off("click", ".suggestion-text", handleSuggestionClick);
					$(document).on("click", ".suggestion-text", handleSuggestionClick);
					var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0];
						objDiv.scrollTop = objDiv.scrollHeight;
					isSuggestionRunning = false;
				}
			},
		});
	
		
	}
	function handleSuggestionClick() {
		let query = $(this).text()
		if(query){
			query = query.trimStart().trimEnd()
			sendMessage({message:query})
			selection('request followup sugggestion')
		} 
	}
	
	var currHolder = ""
	var currType = "string"
	function showPart(part){
		if (part.trim() == '<|endoftext|>') {
			part = ''
			stream_complete = true
		}
		full_stream_answer += part
		let sep_multi_turn = '</s'
		if (full_stream_answer.slice(-sep_multi_turn.length) == sep_multi_turn) full_stream_answer = full_stream_answer.slice(0, -sep_multi_turn.length)
		const $holder = currHolder.find(".chat-message")
		if(part.trim().startsWith("```")){
			currType = currType == "code" ? "string" : "code"
		}
		
		var $lastChild = $holder.children().last()
		if(currType == "string"){
			if(!$lastChild.length || !$lastChild.hasClass("chat-string")){
				$lastChild = $("<span class='chat-string'></span>")
				$holder.append($lastChild)
				$lastChild.text(part.replace("```", ""))
			}
			else{
				$lastChild.text($lastChild.text()+part)
			}
		}
		else if(currType == "code"){
			if(!$lastChild.length || !$lastChild.hasClass("code-snippet-holder")){
				const language = part.replace("```", "")
				$lastChild = $('<div class="code-snippet-holder"></div>')
				const $topBar = $('<div class="top-code-bar"><div class="copy-text">Copied!</div><img class="code-copy-img" src="style/images/copy-btnnn.png"></div>')
				const $area = $('<textarea class="pre-cm"></textarea>')
				$lastChild.append($area)
				$holder.append($lastChild)
				const cmEditor = CodeMirror.fromTextArea($area[0], {
					lineNumbers: false,
					theme:"dracula",
					mode: getCodeLanguage(language)[0],
					viewportMargin: Infinity,
					readOnly:true
				})
				$area.remove()
				setTimeout(()=>{
					cmEditor.refresh()
					$lastChild.prepend($topBar)
				},10)
				$topBar.on("click", async function(){
					await navigator.clipboard.writeText(cmEditor.getValue().trim())
					$(this).find(".copy-text").addClass("active")
					setTimeout(()=>{
						$(this).find(".copy-text").removeClass("active")
					}, 2000)
				})
			}
			else{
				$lastChild.find(".CodeMirror")[0].CodeMirror.doc.getEditor().replaceRange(part, {line: Infinity})
			}
		}
		var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
		objDiv.scrollTop = objDiv.scrollHeight
	}
	
	var cumalativeAnswer = ""
	async function formatMessage(data){
		const {response, completed, id, clickedContinue} = data
		const stream = response[0][0].replace(/[\r\n]{2,}/g, "\n")
		if(clickedContinue){
			cumalativeAnswer += stream
		}
		else{
			cumalativeAnswer = stream
		}
		const answerArr = []
		const splitted = cumalativeAnswer.split("```")
		for (let i = 0; i < splitted.length; i++) { 
			const part = splitted[i]
			if(part.trim().length){
				if(i % 2){
					// code
					var language = part.split("\n")[0]
					var text = part
					if(language.trim().length){
						text = part.split("\n").slice(1).join("\n")
					}
					else{
						language = "javascript"
					}

					answerArr.push({type: "code", text, language})
				}
				else {
					// plain
					answerArr.push({type: "plain", text: part})
				}
			}
		}
		receiveStream({ answerArr, type: { confidence: 0 } , completed, id, clickedContinue})
	}

	function receiveStream(data) {
        var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
        const scrollToBottom = isScrolledToBottom(objDiv)
		const {answerArr, from, time = null, type, completed, id, clickedContinue} = data
		const $parent = $('.chatMessage[data-id='+id+']')
		let chatMessageText =  $parent.find(".chat-message")[0]

		if(clickedContinue){
			$(chatMessageText).empty()
		}
		var answerType = "plain"
		if(type && answerArr.length === 1){
			if(type.confidence > 0.1){
				answerType = "code"
			}
		}
		var allText = ""
		answerArr.forEach((answerObj, idx)=>{
			const str = answerObj.text
			const type = answerObj.type
			allText += str + "\n"
			if(type === "code"){
				// code
				const $areaHolder = $('<div class="code-snippet-holder"></div>')
				const $topBar = $('<div class="top-code-bar"><div class="copy-text">Copied!</div><img class="code-copy-img" src="style/images/copy-btnnn.png"></div>')
				const $area = $('<textarea class="pre-cm">'+str+'</textarea>')
				$areaHolder.append($area)
				$(chatMessageText).append($areaHolder)
				const cmEditor = CodeMirror.fromTextArea($area[0], {
					lineNumbers: false,
					theme:"dracula",
					mode: getCodeLanguage(answerObj.language)[0],
					viewportMargin: Infinity,
					readOnly:true
				})
				$area.remove()
				setTimeout(()=>{
					cmEditor.refresh()
					$areaHolder.prepend($topBar)
				},10)

				$topBar.on("click", async function(){
					await navigator.clipboard.writeText(cmEditor.getValue().trim())
					$(this).find(".copy-text").addClass("active")
					setTimeout(()=>{
						$(this).find(".copy-text").removeClass("active")
					}, 2000)
				})
			}
			else{
				const strToAdd = getLinksFromString(str)
				const $spanStr = $("<span class='chat-string'></span>")
				$spanStr.text(strToAdd)
				$(chatMessageText).append($spanStr)
			}
		})
		if(scrollToBottom){
            setTimeout(() => {
				objDiv.scrollTop = objDiv.scrollHeight
			}, 10);
        }
		if (completed){
			removeTyping({id})
			// continueObj = {}
		}
	}

	function getLinksFromString(str){
		const allLinks = str.match(/\[(.*?)\]\((.*)\)/g) || []
		var strToAdd = str
		allLinks.forEach((link, idx)=>{
			var title = link.match(/\[([^\]]+)\]/gm)[0]
			title = title.substring(1, title.length - 1);
			var linkHref = link.match(/\((.*?)\)/g)[0]
			linkHref = linkHref.substring(1, linkHref.length - 1);
			const element = '<a href="'+linkHref+'" target="_blank">'+title+'</a>'
			strToAdd = strToAdd.replace(link, element)
		})

		return strToAdd
	}


	function addToAllAnswers(text){
		const $chatMessages = $(".chatMessage")
		const from = "blackbox"
		lastAnswer = text
		if(allAnswers[$chatMessages.length - 1]){
			allAnswers[$chatMessages.length - 1].blackbox = allAnswers[$chatMessages.length - 1].blackbox + "\n"+text
		}
		else{
			allAnswers[$chatMessages.length - 1] = {'blackbox': text}
		}
		
		allAnswers = allAnswers.filter(n => n)
	}

	function pauseTyping(data){
		const {id} = data
		$(".chatMessage[data-id="+id+"]").find(".typing").html("blackbox paused")
	}

	function continueTyping(data){
		const {id} = data
		$(".chatMessage[data-id="+id+"]").find(".typing").css("display", "flex")
		$(".chatMessage[data-id="+id+"]").find(".typing").html("blackbox typing <img src='/style/images/loader_three-dots-white.svg' class='typing-loading'>")
	}

	function removeTyping(data){
		const {id} = data
		$(".chatMessage[data-id="+id+"]").find(".typing").css("display","none")
	}

	function showContinue(){
		hideBeside()
		$(".continue-btn").addClass("active")
		var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
		objDiv.scrollTop = objDiv.scrollHeight
	}
	function hideBeside(){
		$(".beside-btn").removeClass("active")
	}

	function isScrolledToBottom(el) {
		var $el = $(el);
		return el.scrollHeight - $el.scrollTop() - $el.outerHeight() < 100;
	}

	$(".send-message").focus()

	function showLoading(){
		const $el = $("<div class='code-block-input chatMessage recieved loading-box' style='padding-bottom:0;'><div class='by'>BLACKBOX</div><img src='/style/images/loading-icon.svg' style='width:40px'></div>")

		$(".chat-area").append($el)
		var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
		objDiv.scrollTop = objDiv.scrollHeight
	}
	function hideLoading(){
		$(".send-message").attr("disabled", false)
		$(".send-message").focus()

		$(".loading-box").remove()
	}

	function getCodeLanguage(fileExtension){
		var language = "javascript"
		var stringLanguage = language
		if(fileExtension === "py"){
			language = "python"
			stringLanguage = "python"
		} else if(fileExtension === "ts"){
			language = "text/typescript"
			stringLanguage = "typescript"
		} else if(fileExtension === "html"){
			language = "htmlmixed"
			stringLanguage = "html"
		} else if(fileExtension === "css"){
			language = "css"
			stringLanguage = "css"
		} else if(fileExtension === "php"){
			language = "php"
			stringLanguage = "php"
		} else if (fileExtension === "cs") {
			language = "text/x-csharp"
			stringLanguage = "csharp"
		} else if (fileExtension === "java") {
			language = "text/x-java"
			stringLanguage = "java"
		} else if (fileExtension === "scala") {
			language = "text/x-scala"
			stringLanguage = "scala"
		} else if (fileExtension === "ceylon") {
			language = "text/x-ceylon"
			stringLanguage = "java"
		} else if (fileExtension === "kt" || fileExtension === "kts"){
			language = "kotlin"
			stringLanguage = "java"
		} else if (fileExtension === "cpp" || fileExtension === "c++"){
			language = "text/x-c++src"
			stringLanguage = "cpp"
		}
		return [language, stringLanguage]
	}

	function showFeedbackToaster(){
		if(!$(".quality-toaster").length){
			const $el = $('<div class="quality-toaster"><div class="toaster-text">How was the quality of your answer?</div><div class="icons-holder"><img src="/style/images/thumbs-down.png" class="bad-icon toaster-icon"><img src="/style/images/thumbs-up.png" class="good-icon toaster-icon"></div></div>')

			$el.find(".toaster-icon").on("click", function(){
				var type = '1' // 1 means thumbs up
				if($(this).hasClass("bad-icon")){
					type = '-1' // -1 is thumbs down
				}
				let userId = ''
				if (user._id) userId = user._id

				$.ajax({
					url:"/feedbackChatResult",
					method:"POST",
					contentType:"application/json",
					data:JSON.stringify({feedback: type, query: lastSearchedQuery, result: lastAnswer, userId: userId, version: version_update}),
					success:function(res){
						qualityToasterSuccess()
					}
				})
			})
	
			$(".button-holder-feedback").prepend($el)
			setTimeout(() => {
				$(".quality-toaster").addClass("active")
				var objDiv = screen.width > 479 ? $(".chatlog-container")[0] : $(".tab-pane-vscode")[0]
				objDiv.scrollTop = objDiv.scrollHeight
			}, 50);	
		}
		$('.suggestion-title').show();
		$('.suggestion-container').show();
		window.postMessage({ command: 'finished'});
	}

	function hideQualityToaster(instant){
		var timeToRemove = 1000
		if(instant){
			timeToRemove = 0
		}
		setTimeout(() => {
			setTimeout(()=>{$(".quality-toaster").remove()},300)
			$(".quality-toaster").removeClass("active")
		}, timeToRemove);
	}
	function qualityToasterSuccess(){
		$(".quality-toaster").find(".toaster-text").text("Thank you!")
		$(".quality-toaster").find(".icons-holder").empty()
		$(".quality-toaster").find(".icons-holder").append('<img src="/style/images/white-check.png" class="toaster-icon">')
		hideQualityToaster()
	}
</script>
<script>
	window.dataLayer = window.dataLayer || [];
	function gtag(){dataLayer.push(arguments);}
	gtag('js', new Date());
	gtag('config', 'G-L4CWV4PDGR');
	gtag('event', 'viewedChat', {});
	var savedChPos = 0
	var returnedSuggestion = ""
	let editor, doc, cursor, line, pos
	pos = { line: 0, ch: 0 }
	var suggestionsStatus = false
	var docLang = "javascript"
	var suggestionDisplayed = false
	var isReturningSuggestion = false
	var codeMirrorEditor
	setTimeout(() => {
		codeMirrorEditor = $(".code-embed").find(".CodeMirror")[0].CodeMirror
		codeMirrorEditor.setOption("extraKeys", {
			Tab: (cm) => {
				if (returnedSuggestion) {
					acceptTab(returnedSuggestion)
				} else {
					cm.execCommand("defaultTab")
				}
			}
		})
		codeMirrorEditor.on("keydown", (cm, event) => {
			setTimeout(() => {
				editor = $(".code-embed").find(".CodeMirror")[0]
				doc = codeMirrorEditor.getDoc()
				cursor = doc.getCursor()
				line = doc.getLine(cursor.line)
				pos = { line: cursor.line, ch: line.length }
				if (cursor.ch > 0) {
					savedChPos = cursor.ch
				}
				const commentSymbol = returnCommentSymbol(docLang)
				if (event.key === "Enter" && isReturningSuggestion) {
					displayGreyAuto("\nBlackbox loading...")
				} else if (
					event.key === "Enter" &&
					!isReturningSuggestion
				) {
					var query = doc.getRange(
						{ line: Math.max(0, cursor.line - 50), ch: 0 },
						{ line: cursor.line, ch: line.length }
					)
					getSuggestionWeb(query)
					displayGreyAuto("Blackbox loading...")
				}
			}, 0)
		})
	}, 20)
	function insert(str, index, value) {
		return str.substr(0, index) + value + str.substr(index)
	}
	function getSuggestionWeb(data) {
		$.ajax({
			url: "/suggestv2",
			method: "POST",
			contentType: "application/json",
			data: JSON.stringify({
				inputCode: data.trim().split("\n").join("\r\n"),
				source: "web",
				when: Date.now()/1000.0,
				languageId: docLang,
				premium: false,
				userId: `${Date.now()}`
			}),
			success: function (res) {
				returnedSuggestion = res.response.trim()
				displayGreyAuto(returnedSuggestion)
				suggestionDisplayed = true
			}
		})
	}

	function acceptTab(text) {
		if (suggestionDisplayed) {
			displayGreyAuto("")
			setTimeout(() => {
				doc.replaceRange(text, pos)
			}, 0);
			returnedSuggestion = ""
			suggestionDisplayed = false
		}
	}

	function displayGreyAuto(text) {
		if (!text) {
			$(".blackbox-suggestion").remove()
			return
		}
		var el = document.querySelector(".blackbox-suggestion")
		if (!el) {
			el = document.createElement("span")
			el.classList.add("blackbox-suggestion")
			el.style = "color:grey"
			el.innerText = text
		} else {
			el.innerText = text
		}
		var lineIndex = pos.line
		editor
			.getElementsByClassName("CodeMirror-line")
			[lineIndex].appendChild(el)
	}
	function returnCommentSymbol(language = "javascript") {
		const languageObject = {
			bat: "@REM",
			c: "//",
			csharp: "//",
			"c++": "//",
			closure: ";;",
			coffeescript: "#",
			dockercompose: "#",
			css: "/*DELIMITER*/",
			"cuda-cpp": "//",
			dart: "//",
			diff: "#",
			dockerfile: "#",
			fsharp: "//",
			"git-commit": "//",
			"git-rebase": "#",
			go: "//",
			groovy: "//",
			kotlin: "//",
			handlebars: "{{!--DELIMITER--}}",
			hlsl: "//",
			html: "<!--DELIMITER-->",
			ignore: "#",
			ini: ";",
			java: "//",
			javascript: "//",
			javascriptreact: "//",
			json: "//",
			jsonc: "//",
			julia: "#",
			latex: "%",
			less: "//",
			lua: "--",
			makefile: "#",
			markdown: "<!--DELIMITER-->",
			"objective-c": "//",
			"objective-cpp": "//",
			perl: "#",
			perl6: "#",
			php: "<!--DELIMITER-->",
			powershell: "#",
			properties: ";",
			jade: "//-",
			python: "#",
			r: "#",
			razor: "<!--DELIMITER-->",
			restructuredtext: "..",
			ruby: "#",
			rust: "//",
			scss: "//",
			shaderlab: "//",
			shellscript: "#",
			sql: "--",
			svg: "<!--DELIMITER-->",
			swift: "//",
			tex: "%",
			typescript: "//",
			typescriptreact: "//",
			vb: "'",
			xml: "<!--DELIMITER-->",
			xsl: "<!--DELIMITER-->",
			yaml: "#",
			fortran:"!"
		}
		return languageObject[language].split("DELIMITER")
	}

	//function to read the query from the url and then trigger a search
	readQuery()
	function readQuery(){
		const query = new URLSearchParams(window.location.search)
		const queryText = query.get('q')
		if(queryText){
			is_url_query = true
			search(queryText)
			selection('outside query')
		}

		const videoId = query.get('videoId')
		if (videoId) displayVideo(videoId)
	}
	
	//function trigger when query parsed form the url
	function search(queryText){
		gtag('event', 'codeChat', {});
		if (queryText.includes('<script>') == false){
			let encodedStr = queryText.replace(/[\u00A0-\u9999<>\&]/g, function(i) {
				return '&#'+i.charCodeAt(0)+';';
			});
			let question = encodedStr
			if(question){
				setTimeout(()=>{
					$(this).css("height", "")
				},10)
				sendMessage({message: question})
			}
		}
	}

	function manageSubscription() {
        $.ajax({
            url: window.location.origin + "/stripe-portal",
            method: "POST",
            data:JSON.stringify({}),
            contentType: "application/json",
            success: function (res) {
                window.location.href = res.url;
            }
        })
    }

	function open_referral_modal(){
		$('.modal-background-blur')[0].style.display='block'
		document.getElementById('referral-code').focus()
	}

	$(document).on("keydown", ".referral-code", function(e){
		const key = e.key
		if(key === "Enter"){
			let invite_code = $(".referral-code")[0].value
			$.ajax({
				url: `/check_referral_code?code=${invite_code}`,
				method: "GET",
				contentType: "application/json",
				success: function (res) {
					console.log('res: ', res)
					if (res.status == 'success'){
						window.location.href=window.location.href
					}
				}
			})
		}
	})
	
	function copy_invite_link(){
		$.ajax({
            url: "/copy_invite_link",
            method: "GET",
            contentType: "application/json",
            success: function (res) {
                console.log('res: ', res)
				if (res.status == 'success'){
					navigator.clipboard.writeText(`${res.invite_id}`)
					document.execCommand("copy");
					let original_button_text = document.getElementById('invite-button').innerText
					document.getElementById('invite-button').innerText = 'Code Copied to Clipboard!'
					setTimeout(function(){
						document.getElementById('invite-button').innerText = original_button_text
					}, 3000)
				}
            }
        })
	}

	function premium(selected='premiumyearly', payNow = false) {
        let paynow_param = ''
        if (payNow) {
            paynow_param = '&paynow=true'
        }
        window.open(`/pricing-checkout?userId=${user._id}&promocode=${selected}${paynow_param}`)
    }

	function schedule_onboarding(){
		window.open('https://calendly.com/blackboxapp/30min')	
	}

	const mobileWidth = 500
	$(window).resize(() => {
		var ww = $(this).width(); //full browser width
		if (ww < mobileWidth) document.getElementById('chat-input-new-chat').innerText = '+'
		else document.getElementById('chat-input-new-chat').innerText = 'New Chat'
	});

	if (window.innerWidth < mobileWidth){
		document.getElementById('chat-input-new-chat').innerText = '+'
	}

	function selection(selected) {
      var data = JSON.stringify({selected: selected});
      var xhr = new XMLHttpRequest();
      xhr.withCredentials = true;
      xhr.addEventListener("readystatechange", function() {
        if(this.readyState === 4) { }
      });
      xhr.open("index.html", "/selection");
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.send(data);
    }

</script>
</body>

<!-- Mirrored from www.useblackbox.io/chat by HTTrack Website Copier/3.x [XR&CO'2014], Sat, 23 Sep 2023 02:02:32 GMT -->
</html>